class Solution {
    public:
        vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
            unordered_map<string,vector<pair<string,double>>> graph;
            for(int i=0;i<equations.size();i++){
                string num1= equations[i][0];
                string num2= equations[i][1];
                double val=values[i];
                graph[num1].push_back({num2,val});
                graph[num2].push_back({num1,1.0/val});
            }
            vector<double> Answer;
            for(int i=0;i<queries.size();i++){
                string begin = queries[i][0];
                string end= queries[i][1];
                unordered_set<string> visited;
                double result = dfs(graph,begin,end,visited);
                Answer.push_back(result);
            }
            return Answer;
            }
            private:
            double dfs(unordered_map<string,vector<pair<string,double>>>& graph, string current,string target, unordered_set<string>& visited){
                if(graph.find(current)==graph.end() || graph.find(target)==graph.end()) return -1.0;
                if(current==target) return 1.0;
                visited.insert(current);
                for(const pair<string,double>& neighbor : graph[current]){
                    string nextNode = neighbor.first;
                    double weight = neighbor.second;
                    if(!visited.count(nextNode)){
                        double result = dfs(graph,nextNode,target,visited);
                        if(result!=-1.0) return result*weight;
                    }
                }
                return -1.0;
        }
    };

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
      int n = grid.size();
        vector<vector<int>> visited(n, vector<int>(n, 0));
        if(grid[0][0] != 0 || grid [n-1][n-1] != 0 ){
            return -1;
        }
        queue<pair<int, int>> myque;
        myque.push({0, 0});
        visited[0][0]=1;
        int result = 1;
        int drow[8]={-1,-1,-1,0,0,1,1,1};
        int dcolumn[8]={-1,0,1,-1,1,-1,0,1};
        while(!myque.empty()) { 
            int sizee = myque.size();
            for(int i = 0; i < sizee; i++){
                auto [row, column] =myque.front();
                myque.pop();
                if(row==n-1 && column==n-1){
                    return result;
                }
                for(int d=0;d<8;d++){
                    int newrow=row+drow[d];
                    int newcolumn=column+dcolumn[d];
                    if(newrow>=0 && newcolumn>=0 && newrow<n && newcolumn<n && grid[newrow][newcolumn]==0 && visited[newrow][newcolumn]==0){
                        visited[newrow][newcolumn]=1;
                        myque.push({newrow,newcolumn});
                    }
                }
           }
           result++;
        }
        return -1;  
    }
};

class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string,int> seen;
        for(const string& word: wordList){
            seen[word]=-1;
        }
        if(seen.find(endWord)==seen.end()){
            return 0;
        }
        seen[beginWord]=1;
        queue<string> myque;
        myque.push(beginWord);
        while(!myque.empty()){
            string word = myque.front();
            myque.pop();
            for(int i=0;i<word.size();i++){
                string temp=word;
                for(char c='a';c<='z';c++){
                    temp[i]=c;
                    if(temp==word) continue;
                    if(temp==endWord){
                        return seen[word]+1;
                    }
                    if(seen.find(temp)!=seen.end()&&seen[temp]==-1){
                        seen[temp]=seen[word]+1;
                        myque.push(temp);
                    }
                }
            }
        }
        return 0;
    }
};

class Solution {
public:
const vector<int> n={0, 0, -1, 1};
const vector<int> m={-1, 1 , 0, 0};
    int maxDistance(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        queue<pair<int, int>> myque;
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if ( grid[i][j]==1){
                    myque.push({i,j});
                    grid[i][j] = 2;
                }
            }
        }
        if(myque.size() == row * col || myque.empty())
            return -1;
            int max = 0;
            while(!myque.empty()){
                int size = myque.size();
                while(size--){
                    auto node = myque.front();
                    myque.pop();
                    for(int i = 0; i < 4; i++){
                        int nexti= node.first + n[i];
                        int nextj= node.second + m[i];
                        if((nexti >= 0 && nextj >= 0) && (nexti < row && nextj < col)){
                            if(grid[nexti][nextj] == 0){
                            myque.push({nexti, nextj});
                            grid[nexti][nextj] = 2;
                        }
                    }
                }
            }
            max++;
        }
        return max-1;
    }
};

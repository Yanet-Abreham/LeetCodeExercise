class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> res(m, vector<int>(n, -1));
        queue<pair<int,int>> myque;
        for(int i = 0; i < m; i++){
         for(int j = 0; j < n; j++){
            if(isWater[i][j] == 1){
                myque.push({i,j});
                res[i][j] = 0;
            }
          }
        }
    int eraseRow[] = {-1, 0, 1, 0};
    int eraseCol[] = {0, -1, 0, 1};
    while(!myque.empty()){
        int row = myque.front().first;
        int col = myque.front().second;
         myque.pop();
         for(int i = 0; i < 4; i++){
            int newrow = row + eraseRow[i];
            int newcolumn = col + eraseCol[i];
            if(newrow >= 0 && newrow < m && newcolumn >= 0 && newcolumn < n && res[newrow][newcolumn]< 0){
                myque.push({newrow, newcolumn});
                res[newrow][newcolumn] = res[row][col] + 1;
            }
         }
    }
    return res;
    }
};

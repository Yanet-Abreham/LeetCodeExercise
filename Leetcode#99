class Solution {
    public:
    TreeNode *first, *middle, *last, *prev;
        void recoverTree(TreeNode* root) {
           first=middle=last=nullptr;
           prev=new TreeNode(INT_MIN);
           inorder(root);
           if(first&&last){ swap(first->val, last->val);}
           else if(first && middle) {swap(first-> val, middle->val);}
        }
        private: 
        void inorder(TreeNode* root){
            if(!root) return; 
            inorder(root->left);
            if(prev && root->val < prev->val){
                if(!first){
                    first=prev;
                    middle=root;
                } else{
                    last=root;
                }
            }
            prev = root;
            inorder(root->right);
        }
    };
